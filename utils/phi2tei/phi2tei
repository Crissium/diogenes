#!/usr/bin/perl -w

# NB.  This is obsolete legacy code; the current version is
# xml-export.pl in the server directory.

# phi2tei converts databases of classical texts in the CD-ROM format
# develped by the Packard Humanities Institute (PHI) to XML files
# conforming to the P5 specification of the Text Encoding Initiative
# (TEI).  It depends upon the Diogenes libraries.  It needs to be run
# on a computer with Diogenes installed and where the user has
# told Diogenes where to find the database to be converted.

# NB. We attempt to guess where the Diogenes Perl libraries are
# located, but if you installed the application in a non-default
# place, this will not work, and you will need to put a line at the
# top of this script like this:
# use lib '/path/to/diogenes/perl';

# These are the default locations for various platforms:
use if (-e  '/Applicazioni/Diogenes.app/Contents/Resources/perl'), lib =>  '/Applicazioni/Diogenes.app/Contents/Resources/perl';
use if (-e  '/Applications/Diogenes.app/Contents/Resources/perl'), lib =>  '/Applications/Diogenes.app/Contents/Resources/perl';
use if (-e 'C:\Program Files (x86)\Diogenes\perl'), lib => 'C:\Program Files (x86)\Diogenes\perl';
use if (-e 'C:\Program Files\Diogenes\perl'), lib => 'C:\Program Files\Diogenes\perl';
use if (-e '/usr/local/diogenes/perl'), lib => '/usr/local/diogenes/perl';

# This script was developed by Peter Heslin at the request of and with
# the financial support of the DigiLibLT project.  The XML output has
# been designed to harmonize with the subset of TEI markup used by
# that project.

# http://www.digiliblt.unipmn.it
# http://www.dur.ac.uk/p.j.heslin/Software/Diogenes/

# There is a single mandatory command-line switch -c to specify which
# corpus to convert.  The output is put in the "output" sub-directory.

# This software is distributed by its author under the GNU General
# Public License (GPL) v.3.

# Version History
# phi2tei -- version 1.0 -- date: 1 June 2013
# initial release to DigiLibLT for testing

# phi2tei -- version 2.0 -- date: 22 Aug 2013
# Fixes for bugs found by DigiLibLT.  XML now validates against the
# DigiLibLT schema

# phi2tei -- version 3.0 -- date: 26 Oct 2014 Added -p option for
# DigiLibLT; fixed a major bug in hanging divs introduced in version
# 2.0.

# phi2tei -- version 3.1 -- date: 3 June 2015
# Fixed a small bug in hanging divs.

sub VERSION_MESSAGE {print "phi2tei version 3.1\n"}

use strict;
use warnings;
use Getopt::Std;
$Getopt::Std::STANDARD_HELP_VERSION = 1;
getopts ('alproc:s:n:d');
our ($opt_a, $opt_l, $opt_p, $opt_c, $opt_r, $opt_o, $opt_s, $opt_d, $opt_n);
sub HELP_MESSAGE {
    my $corpora = join ', ', sort values %Diogenes::Base::choices;
    print qq{

phi2tei converts databases of classical texts in the CD-ROM format
develped by the Packard Humanities Institute (PHI) to XML files
conforming to the P5 specification of the Text Encoding Initiative
(TEI).  It creates an 'output' subdirectory of the current directory
into which to put those XML files; it will fail if that subdirectory
already exists unless you specify the -o switch to overwrite it.

There is one mandatory switch:

-c abbr   The abberviation of the corpus to be converted.  Valid values
          are: $corpora

The following optional switches are supported:

-d        Debug info: report progress of conversion 
-n        Convert a specific author number only
-r        Convert book numbers to Roman numerals, as in DigiLibLT
-o        Overwrite any exisiting "output" subdirectory
-p        Mark paragraphs as milestones rather than divs
-l        Pretty-print XML using xmllint
-a        Suppress translating indentation into <space> tags 
-s path   Validate output against an Relax NG Schema located at (full) path  
};
}

use Data::Dumper;
push @INC, '.';
use Diogenes::Base qw(%work %author %work_start_block %level_label
                      %database);
use Diogenes::Browser;
use Diogenes::BetaHtml;
# package Diogenes::Converter;
# @Diogenes::Converter::ISA = qw( Diogenes::Base );
use XML::LibXML;

my $debug = $opt_d ? 1 : 0;
use IO::Handle;
my $xmlns = 'http://www.tei-c.org/ns/1.0';

my $xml_header=qq{<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="$xmlns">
  <teiHeader>
    <fileDesc>
      <titleStmt>
        <title>__TITLE__</title>
        <author>__AUTHOR__</author>
        <respStmt>
          <resp>Automated Conversion to XML</resp>
          <name>phi2tei (part of the DigiLibLT project)</name>
        </respStmt>
      </titleStmt>
      <publicationStmt>
        <publisher>DigilibLT Project</publisher>
        <pubPlace>Vercelli</pubPlace>
        <date>__YEAR__</date>
        <availability>
          <p><ref target="http://creativecommons.org/licenses/by-nc-sa/3.0/it/"/></p>
        </availability>
        <idno>__IDNO__</idno>
      </publicationStmt>
      <sourceDesc>
        <p>__SOURCE__</p>
      </sourceDesc>
    </fileDesc>
  </teiHeader>
  <text>
    <body>
};

my $footer = q{
    </body>
  </text>
</TEI>
};

# Change English labels to conform with the Latinizing usage of DigiLibLT
my %div_translations = (
                        book => 'lib',
                        chapter => 'cap',
                        chap => 'cap',
                        section => 'par',
                        sect => 'par',
                        fragment => 'frag',
                        argument => 'arg',
                        declamation => 'decl',
                        fable => 'fab',
                        letter => 'epist',
                        life => 'vit',
                        name => 'nomen',
                        oration => 'orat',
                        page => 'pag',
                        play => 'op',
                        paradox => 'parad',
                        poem => 'carmen',
                        satire => 'sat',
                        sentence => 'sent',
                        sententia => 'sent',
                        title => 'cap',
                        verse => 'vers',
                        work => 'op',
                        addressee => 'nomen',
                        column => 'col',
);
use charnames qw(:full :short latin greek);
binmode(STDOUT, ":utf8");

use File::Spec::Functions;
use File::Path qw(remove_tree);

if (-e 'output') {
    if ($opt_o) {
        remove_tree('output');
    }
    else {
        die "Error: output directory already exists" ;
    }
}
mkdir 'output';
chdir 'output';

die "Error: specify corpus" unless $opt_c;
my $corpus = $opt_c;
die "Unknown corpus" unless exists $database{$corpus};

open( AUTHTAB, ">authtab.xml" ) or die "Could not create authtab.xml\n";
AUTHTAB->autoflush(1);
print AUTHTAB qq{<authtab corpus="$corpus">\n};

my %args;
$args{type} = $corpus;
$args{encoding} = 'UTF-8';
$args{bib_info} = 1;
$args{perseus_links} = 0;

my $query = new Diogenes::Browser(%args);
my ($buf, $i, $auth_name, $real_num, $work_name, $body, $header, $is_verse, $hanging_div);

my @all_auths = sort keys %{ $Diogenes::Base::auths{$corpus} };
if ($opt_n) {
    @all_auths = split /,\s*/, $opt_n;
}
AUTH: foreach my $auth_num (@all_auths) {
    $auth_num = $opt_n if $opt_n and $opt_n =~ m/^\d+$/;
    $real_num = $query->parse_idt ($auth_num);
    $query->{auth_num} = $auth_num;
    $auth_name = $Diogenes::Base::auths{$corpus}{$auth_num};
    my $lang = $Diogenes::Base::lang{$corpus}{$auth_num};
    if ($lang eq 'g') {
        $query->latin_with_greek(\$auth_name);
    }
    $auth_name = strip_formatting($auth_name);
    my $filename_in = $query->{cdrom_dir}.$query->{file_prefix}.
        $auth_num.$query->{txt_suffix};
    my $punct = q{_.;:!?};
    local undef $/;
    print "Converting $auth_name ($auth_num)\n" if $debug;
    open( IN, $filename_in ) or die "Could not open $filename_in\n";
    $buf = <IN>;
    close IN or die "Could not close $filename_in";
    print AUTHTAB qq{<author name="$auth_name" n="$auth_num">\n};
    $i = -1;
    my $body = '';
    my $line = '';
    my $chunk = '';
    my $hanging_div = '';
    my %old_levels = ();
    my %div_labels = ();
    my @relevant_levels = ();
    my @divs;
    my $work_num = 'XXXX';
    my $filename_out = '';
    while ($i++ <= length $buf) {
        my $char = substr ($buf, $i, 1);
        my $code = ord ($char);
        if ($code == hex 'f0' and ord (substr ($buf, ($i+1), 1)) == hex 'fe') {
            # End of file -- close out work
            $chunk .= $line;
            $body .= convert_chunk($chunk, $lang);
            $chunk = '';
            if ($is_verse) {
                $body .= "</l>\n";
            }
            else {
                $body .= "</p>\n";
            }
            $body .= "</div>\n" for (@divs);
            write_xml_file($filename_out, $header.$body.$footer);
            print AUTHTAB "</author>\n";
            next AUTH;
        }
        elsif ($code >> 7) {
            # Close previous line
            if ($hanging_div) {
                # If we come to the end of a line without finding
                # punctuation and we still have an prose div hanging
                # from the previous line, close the div out at start
                # of previous line.  This happens, e.g. when the div
                # was not really hanging as for n="t" title sections.
                if ($chunk =~ m/-\s*$/) {
                    # But first we check to make sure there is no
                    # hyphenation hanging over.  If so, break at a
                    # comma, or, failing that, at the first space in
                    # the line.
                    if ($line =~ m/(.*?),(.*)/) {
                        $chunk .= $1 . ',';
                        $line = $2;
                    }
                    elsif ($line =~ m/(\S+)\s+(.*)/) {
                        $chunk .= $1;
                        $line = $2;
                    }
                    else {
                        warn "No solution: $chunk \n\n$line\n";
                    }
                }
                $body .= convert_chunk($chunk, $lang);
                $chunk = '';
                $body .= $hanging_div;
                $hanging_div = '';
            }
            $chunk .= $line;
            $line = '';
            $query->parse_non_ascii(\$buf, \$i);
            my $new_div = -1;
            if (@relevant_levels and %old_levels) {
            LEVELS: foreach (@relevant_levels) {
                    if (exists $old_levels{$_} and exists $query->{level}{$_} and
                        $old_levels{$_} ne $query->{level}{$_}) {
                        $new_div = $_;
                        last LEVELS;
                    }
                }
            }
            %old_levels = %{ $query->{level} };
            if ($query->{work_num} ne $work_num) {
                # We have a new work
                if ($work_num ne 'XXXX') {
                    # Close out old work unless we have just started this author
                    $body .= convert_chunk($chunk, $lang);
                    $chunk = '';
                    if ($is_verse) {
                        $body .= "</l>\n";
                    }
                    else {
                        $body .= "</p>\n";
                    }
                    $body .= "</div>\n" for (@divs);
                    write_xml_file($filename_out, $header.$body.$footer);
                }
                $work_num = $query->{work_num};

                my %works =  %{ $work{$corpus}{$real_num} };
                $work_name = $works{$work_num};
                if ($lang eq 'g') {
                    $query->latin_with_greek(\$work_name);
                }
                $work_name = strip_formatting($work_name);
                $query->{work_num} = $work_num;
                $filename_out = $corpus.$auth_num.$work_num.'.xml';
                my $source = $query->get_biblio_info($corpus, $auth_num, $work_num);
                if ($lang eq 'g') {
                    $query->latin_with_greek(\$source);
                }
                $source = strip_formatting($source);
                $body = '';
                $hanging_div = '';
                my @time = localtime(time);
                my $year = $time[5];
                $year += 1900;
                $header = $xml_header;
                $header =~ s#__AUTHOR__#$auth_name#;
                $header =~ s#__TITLE__#$work_name#;
                $header =~ s#__SOURCE__#$source#;
                $header =~ s#__IDNO__#$corpus$auth_num$work_num#;
                $header =~ s#__YEAR__#$year#;

                $is_verse = is_work_verse($auth_num, $work_num);
#                 print "$auth_num: $work_num, $is_verse\n" if $debug;
                %div_labels = %{ $level_label{$corpus}{$auth_num}{$work_num} };
                @divs = reverse sort numerically keys %div_labels;
                pop @divs, 1;
                @relevant_levels = @divs;
                push @relevant_levels, 0 if $is_verse;
                
                for (keys %div_labels) {
                    if (exists $div_translations{$div_labels{$_}}) {
                        $div_labels{$_} =
                            $div_translations{$div_labels{$_}};
                    }
                }
                foreach (@divs) {
                    if ($opt_r and $div_labels{$_} eq 'lib') {
                        $body .= q{<div type="lib" n="}.roman($query->{level}{$_}).qq{">\n}; 
                    }
                    else {
                        my $n = $query->{level}{$_} || 1; # bug in phi2331025.xml
                        $body .= qq{<div type="$div_labels{$_}" n="$n">\n};
                    }
                }
                if ($is_verse) {
                    $body .= qq{<l n="$query->{level}{0}">};
                }
                else {
                    $body .= q{<p>};
                }
                print AUTHTAB qq{  <work name="$work_name" n="$work_num">\n};
                print AUTHTAB qq{    <div name="$div_labels{$_}"/>\n} for (@divs);
                print AUTHTAB qq{    <verse/>\n} if $is_verse;
            }
            elsif ($new_div >= 0) {
                # We have a new div or line of verse
                my $temp = $is_verse ? "</l>\n" : "</p>\n"; 
                $temp .= ("</div>\n" x $new_div);

                foreach (reverse 1 .. $new_div) {
                    if ($opt_r and $div_labels{$_} eq 'lib') {
                        $temp .= q{<div type="lib" n="}.roman($query->{level}{$_}).qq{">\n};
                    }
                    else {
                        $temp .= qq{<div type="$div_labels{$_}" n="$query->{level}{$_}">\n};
                    }
                }
                if ($is_verse) {
                    $temp .= qq{<l n="$query->{level}{0}">}; 
                }
                else {
                    $temp .= q{<p>}; 
                }
                # We seem to have a prose section which starts in the coming line
                if (((not $is_verse)
                     and ($chunk !~ m#[$punct]\s*$#)
                     and ($chunk =~ m/\S/))
                    # But we need to rule out titles and headings, so
                    # we exclude "t" and where the section is back to 1
                    and (not ($query->{level}{1} and ($query->{level}{1} eq "1"
                                                      or $query->{level}{1} =~ m/t/)))
                    and (not ($query->{level}{2} and 
                              ($query->{level}{2} =~ m/t/)))) {
                    
                    $hanging_div = $temp;
                    $chunk .= "\n";
                }
                else {
                    $body .= convert_chunk($chunk, $lang);
                    $chunk = '';
                    $body .= $temp;
                }
            }    
            else {
                # We have a line that can be added to the current chunk
                $chunk .= "\n";
            }
        }
        else {
            $line .= $char;
            if ($hanging_div and $char =~ m#[$punct]#) {
                # We have found a suitable punctuation mark to close
                # out a hanging prose div
                $chunk .= $line;
                $line = '';
                $body .= convert_chunk($chunk, $lang);
                $chunk = '';
                $body .= $hanging_div;
                $hanging_div = '';
            }
        }
    }
    # We never get here
}

print AUTHTAB "</authtab>\n";
close(AUTHTAB) or die "Could not close authtab.xml\n";


sub convert_chunk {
    my ($chunk, $lang) = @_;
    
    # Misplaced full-stop in Hyginus 254.2.  Causes chaos.
#     $chunk =~ s#\[2QVI PIISSIMI FVERVNT\.\]2#\[2QVI PIISSIMI FVERVNT\]2\.#;

    my %acute = (a => "\N{a with acute}", e => "\N{e with acute}", i => "\N{i with acute}", o => "\N{o with acute}", u => "\N{u with acute}", 
             A => "\N{A with acute}", E => "\N{E with acute}", I => "\N{I with acute}", O => "\N{O with acute}", U => "\N{U with acute}"); 
    my %grave = (a => "\N{a with grave}", e => "\N{e with grave}", i => "\N{i with grave}", o => "\N{o with grave}", u => "\N{u with grave}", 
             A => "\N{A with grave}", E => "\N{E with grave}", I => "\N{I with grave}", O => "\N{O with grave}", U => "\N{U with grave}"); 
    my %diaer = (a => "\N{a with diaeresis}", e => "\N{e with diaeresis}", i => "\N{i with diaeresis}", o => "\N{o with diaeresis}", u => "\N{u with diaeresis}", 
             A => "\N{A with diaeresis}", E => "\N{E with diaeresis}", I => "\N{I with diaeresis}", O => "\N{O with diaeresis}", U => "\N{U with diaeresis}"); 
    my %circum = (a => "\N{a with circumflex}", e => "\N{e with circumflex}", i => "\N{i with circumflex}", o => "\N{o with circumflex}", u => "\N{u with circumflex}", 
             A => "\N{A with circumflex}", E => "\N{E with circumflex}", I => "\N{I with circumflex}", O => "\N{O with circumflex}", U => "\N{U with circumflex}"); 
    my %ampersand_dollar = (1 => "bold", 2 => "bold italic", 3 => "italic", 4 => "superscript", 5 => "subscript", 7 => "small capitals", 10 => "small", 11 => "small bold", 13 => "small italic", 20 => "large ", 21 => "large bold", 23 => "large italic");

    # remove hyphenation
    $chunk =~ s#(\S+)\-\s*(?:\@*\d*\s*)\n(\S+)#$1$2\n#g;

    # Greek
    if ($lang eq 'g') {
        $query->greek_with_latin(\$chunk);
    }
    else {
        $query->latin_with_greek(\$chunk);
    }
    # Latin accents
    $chunk =~ s#([aeiouAEIOU])\/#$acute{$1}#g;
    $chunk =~ s#([aeiouAEIOU])\\#$grave{$1};#g;
    $chunk =~ s#([aeiouAEIOU])\=#$circum{$1}#g;
    $chunk =~ s#([aeiouAEIOU])\+#$diaer{$1}#g;

    $chunk =~ s#\[2{43#{43\[2#g; #fix improper nesting in Servius

    # Escape XML reserved chars
    $chunk =~ s#\&#&amp;#g;
    $chunk =~ s#\<#&lt;#g;
    $chunk =~ s#\>#&gt;#g;
    $chunk =~ s#\"\d*#&quot;#g;

    # Speakers in drama: {&7 ... }& {40&7 ... }40&
    $chunk =~ s#\{(?:40)?&amp;7([^}]*)\}(?:40)?#<label style="speaker">$1</label>#g;
    $chunk =~ s#\{40([^}]*)\}40#<label style="speaker">$1</label>#g;
    $chunk =~ s#\{41([^}]*)\}41#<label style="stage direction">$1</label>#g;

    # Font switching.  Beta does not always nest these properly: e.g
    # "HS &7<ccc&>", so we could try to bring trailing markup inside:
    # $chunk =~
    # s#(?:\$|&amp;)(\d+)(.*)(?:\$|&amp;)\d*((?:\]|\}|&gt;)\d*)#my$tail=$3||'';exists
    # $ampersand_dollar{$1} ? qq{<hi
    # rend="$ampersand_dollar{$1}">$2$tail</hi>} : qq{$2$tail}#ge;
    # but this fails when markup is nested correctly: e.g. "{40&7Phaedria& [2&7Dorias&]2}40
    # Only way to deal with the inconsistency is to throw away font
    # information (which is usually superfluous anyway) when there is
    # any balanced markup inside:
    $chunk =~ s#(?:\$|&amp;)(\d+)([^&{}\[\]]+)(?:\$|&amp;)\d*#exists
        $ampersand_dollar{$1} ? qq{<hi rend="$ampersand_dollar{$1}">$2</hi>} : qq{$2}#ge;

    $chunk =~ s#&amp;\d*##g;
    $chunk =~ s#\$\d*##g;

    # {} titles, marginalia, misc.

    # Fix unbalanced markup
    $chunk =~ s/{2\@{2#10}2/{2#10/g;

    $chunk =~ s#\{1((?:[^\}]|\}[^1])*?)(?:\}1|$)#<head>$1</head>#g;
    $chunk =~ s#\{2((?:[^\}]|\}[^2])*?)(?:\}2|$)#<hi rend="marginalia">$1</hi>#g;
    # Servius
    $chunk =~ s#\{43((?:[^\}]|\}[^4]|\}4[^3])*?)(?:\}43|$)#<seg type="Danielis" rend="italic">$1</seg>#g;
    $chunk =~ s#((?:[^\}]|\}[^4]|\}4[^3])*?)\}43#<seg type="Danielis" rend="italic">$1</seg>#g;

    $chunk =~ s#\{\d+([^\}]+)(?:\}\d+|$)#<head>$1</head>#g;
    # Speakers in e.g. Eclogues: {M.}
    $chunk =~ s#\{([^\}]+)\}#<label style="speaker">$1</label>#g;

#     $chunk =~
#         s#(<hi rend[^>]+>)(.*)<head>(.*)</hi>(.*)</head>#$1$2<head>$3</head>$4</hi>#gs;
#         s#(<hi rend.*?)(<head>.*?)</hi>(.*)</head>#$1$2</head>$3</hi>#gs;
#     $chunk =~
#         s#<head>(.*)(<hi rend[^>]+>)(.*)</head>(.*)</hi>#<head>$1$2$3</hi>$4</head>#gs;
#         s#(<head>.*?)(<hi .*?)</head>(.*?)</hi>#$1foo$2</hi>$3</head>#gs;
#      $chunk =~
#          s#(<hi rend.*?)(<head>.*?)</hi>(.*)</head>#$1$2</head>$3</hi>#gs;



    
    # # and *#
    $chunk =~ s/\*#(\d+)/$Diogenes::BetaHtml::starhash{$1}/g;
    $chunk =~ s/(?<!&)#(\d+)/$Diogenes::BetaHtml::hash{$1}||'??'/ge;
    $chunk =~ s/(?<!&)#/&#x0374;/g;
    
    # some punctuation
    $chunk =~ s/_/\ -\ /g;
    $chunk =~ s/!/./g;

    # "inverted dagger", used in Augustus imp., not in Unicode so use
    # normal dagger 
    $chunk =~ s/%157/&#134;/g;

    $chunk =~ s#%(\d+)#$Diogenes::BetaHtml::percent{$1}#g;
    # Use more standard glyphs for dagger and double
    $chunk =~ s/%/&#134;/g;
    $chunk =~ s/&#2020;/&#134;/g;
    $chunk =~ s/&#2021;/&#135;/g;
 
    # @ (whitespace)
    ## Sometimes these appear at the end of a line, to no apparent purpose.
    $chunk =~ s#@+\s*$##g;
    $chunk =~ s#@\d+\s*$##g;
    $chunk =~ s#@+\s*\n#\n#g;
    $chunk =~ s#@\d+\s*\n#\n#g;

    if ($opt_a) {
        $chunk =~ s#@@+\d*#    #g;
        $chunk =~ s#@\d+#  #g;
        $chunk =~ s#@# #g;
    } else {
        $chunk =~ s#@(\d+)#q{<space quantity="}.$1.q{"/>}#ge;
        $chunk =~ s#(@@+)#q{<space quantity="}.(length $1).q{"/>}#ge;
        $chunk =~ s#@#<space/>#g;
        $chunk =~ s#\^(\d+)#q{<space quantity="}.$1.q{"/>}#ge;
        $chunk =~ s#\^#<space/>#g;
    }

    # Not sure if <> are used in PHI texts
    $chunk =~ s#&lt;1(?!\d)((?:(?!\>|$).)+)(?:&gt;1(?!\d))#<hi rend="underline">$1</hi>#gs;
    $chunk =~ s#&lt;6(?!\d)((?:(?!\>|$).)+)(?:&gt;6(?!\d))#<hi rend="superscript">$1</hi>#gs;
    $chunk =~ s#&lt;7(?!\d)((?:(?!\>|$).)+)(?:&gt;7(?!\d))#<hi rend="subscript">$1</hi>#gs;
    $chunk =~ s#&lt;\d*#&lt;#g;
    $chunk =~ s#&gt;\d*#&gt;#g;

    # [] (brackets of all sorts)
    if (0) {
        # This would be to keep typographical markup
        $chunk =~ s#\[(\d+)#$Diogenes::BetaHtml::bra{$1}#g; 
        $chunk =~ s#\](\d+)#$Diogenes::BetaHtml::ket{$1}#g;
    }
    else {
        # We try to convert editorial symbols to TEI markup.  This may
        # not always work! 

        $chunk =~ s#\[1#(#g; 
        $chunk =~ s#\]1#)#g; 
        $chunk =~ s#\[2#&lt;#g; 
        $chunk =~ s#\]2#&gt;#g; 
        $chunk =~ s#\[3#{#g; 
        $chunk =~ s#\]3#}#g; 
        $chunk =~ s#\[(\d+)#[#g;
        $chunk =~ s#\](\d+)#]#g;

        $chunk =~ s#\[?\.\.\.+\]?#<gap/>#g;
        $chunk =~ s#\[([^\]\n])\]#<del>$1</del>#g;
        
        $chunk =~ s#&lt;\.\.\.+&gt;#<supplied><gap/></supplied>#g;    
        $chunk =~ s#&lt;([^.&><]*)\.\.\.+&gt;#<supplied>$1<gap/></supplied>#g;    
        $chunk =~ s#&lt;\.\.\.+([^.&><]*)&gt;#<supplied><gap/>$1</supplied>#g;    
        
        $chunk =~ s#&lt;([^&<>]*)&gt;#<supplied>$1</supplied>#g;
        $chunk =~ s!&#13[45];([^\n])&#13[45];!<unclear>$1</unclear>!g;
        $chunk =~ s!&#13[45];!<unclear/>!g;
    }

    $chunk =~ s#\`##g;

    return $chunk;
}

sub write_xml_file {
    my ($file, $text) = @_;
    if ($debug) {
        open( OUT, ">tmp.xml" ) or die $!;
        print OUT $text;
        close(OUT) or die $!;
    }

    $text = post_process_xml($text, $file);

    if ($opt_l) {
        open(LINT, "|xmllint --format - >$file") or die "Can't open xmllint: $!";
        print LINT $text;
        close(LINT) or die "Could not close xmllint!\n";
    }
    else {
        open( OUT, ">$file" ) or die "Could not create $file\n";
        print OUT $text;
        close(OUT) or die "Could not close $file\n";
    }
    print AUTHTAB "  </work>\n";

    if ($opt_s) {
        unless (-e '../jing.jar') {
            die "Error: jing.jar not found.  For validation, put it in
        the same directory as this script and make sure Java is
        installed";
        }
#         my $ret = `xmllint --noout --relaxng $opt_s $file`;
        my $ret = `java -jar ../jing.jar -c $opt_s $file`;
        print $ret;
    }
}


sub post_process_xml {
    my $in = shift;
    my $file = shift;
    
    my $parser = XML::LibXML->new({huge=>1});
    my $xmldoc = $parser->parse_string($in);
    # Remove all div and l elements with n="t", remove all tags and
    # put the text in <head>s instead (unless element has only whitespace)
    foreach my $node ($xmldoc->getElementsByTagName('l'), 
                      $xmldoc->getElementsByTagName('div'),) {
        my $n = $node->getAttribute('n');
        if ($n and $n =~ m/^t\d?$/ or $n =~ m/^\d*t$/ or $n =~ m/^\d+t\d+$/) {
            if ($node->textContent =~ m/\S/) {
                my $head = $xmldoc->createElementNS($xmlns, 'head');
                $head->appendText($node->textContent);
                $node->parentNode->insertBefore($head, $node);
            }
            $node->unbindNode;
        }
    }
    # When there are two <head>s in immediate succession, it's usually
    # just a line break, so we unify them
    foreach my $node ($xmldoc->getElementsByTagName('head')) {
        my $sib = $node->nextNonBlankSibling; 
        if ($sib and $sib->nodeName eq 'head') {
            $node->appendText($sib->textContent);
            $sib->unbindNode;
        }
    }

    # Sometimes we get <p><head>foo</head><head>bar</head> blah.  So
    # put the <p> after the heads.
    foreach my $node ($xmldoc->getElementsByTagName('head')) {
        if ($node->parentNode->nodeName eq 'p') {
            my $new_head = $node->cloneNode(1);
            $node->parentNode->parentNode->insertBefore($new_head,
                                                        $node->parentNode);
            $node->unbindNode;
        }
    }
    # Some texts have multiple <head>s spread throughout a single
    # <div> or <body>, such as when these represent the titles of
    # works to which a list of fragments have been assigned.  When
    # this happens, we change the <head>s to <label>s, of which we are
    # allowed to have more than one.  
    foreach my $node ($xmldoc->getElementsByTagName('head')) {
        my $parent = $node->parentNode;
        foreach my $sibling ($parent->childNodes) {
            if (not $node->isSameNode($sibling) and $sibling->nodeName eq 'head') {
                $sibling->setNodeName('label');
            }
        }
    }

    # Added this at the request of DigiLibLT.  They prefer paragraph
    # divs to be converted into milestones, so that <div type="par"
    # n="1"> becomes <milestone unit="par" n="1"/> and the
    # higher-level div is contained in just one <p>, with inner <p>s
    # removed. Found this surprisingly tricky, so we do this step by step
    if ($opt_p and not $is_verse) {
         my $xpc = XML::LibXML::XPathContext->new;
         $xpc->registerNs('x', $xmlns);
         # Put a collection of multiple <div type="par">s inside a big
         # <p>
         foreach my $node (
             # Find nodes with a child of at least one <div type="par">
             $xpc->findnodes('//*[x:div/@type="par"]',$xmldoc)) {
             my $new_p = $xmldoc->createElementNS( $xmlns, 'p');
             
             $new_p->appendText("\n");
             foreach my $child ($node->nonBlankChildNodes) {
                 $new_p->appendChild($child);
             }
             $new_p->appendText("\n");
             $node->appendChild($new_p);
         }
         
         # Remove all <p>s inside <div type="par">
         foreach my $node (
             $xpc->findnodes('//x:div[@type="par"]/x:p',$xmldoc)) {
             my $parent = $node->parentNode;
             foreach my $child ($node->nonBlankChildNodes) {
                 $parent->appendChild($child);
             }
             $node->unbindNode;
         }
         # Change divs to milestones
         foreach my $node (
             $xpc->findnodes('//x:div[@type="par"]',$xmldoc)) {
             my $mile = $xmldoc->createElementNS($xmlns, 'milestone');
             $mile->setAttribute("unit", "par" );
             $mile->setAttribute("n", $node->getAttribute('n') );
             my $parent = $node->parentNode;
             $parent->appendText("\n");
             $parent->appendChild($mile);
             $parent->appendText("\n");
             foreach my $child ($node->nonBlankChildNodes) {
                 $parent->appendChild($child);
             }
             $node->unbindNode;
         }
         # The foregoing can end up with <head>s inside the new <p>s.
         foreach my $node (
             $xpc->findnodes('//x:p//x:head',$xmldoc)) {
             my $grandparent = $node->parentNode->parentNode;
             $grandparent->insertBefore($node, $node->parentNode);
#              print $grandparent->nodeName;
         }
    }

    # Some desperate special cases here, which I would regard as bugs
    # in the PHI markup
    my $out = $xmldoc->toString;;

    # Irritating bug in the PHI markup of the title of Bk 1 of Varro, de re rust. 
    if ($file eq 'phi0684002.xml') {
        $out =~ s#\<head\>\s*RERVM RVSTICARVM DE AGRI CVLTVRA\s*\n\s*LIBER PRIMVS\s*\<\/head\>##s;
        $out =~ s#<div type="cap" n="ca">\s*<head>\s*CAPITVLA LIBRI PRIMI\s*</head>#
<head>RERVM RVSTICARVM DE AGRI CVLTVRA
 LIBER PRIMVS</head>
<div type="cap" n="pr">#s;
    }
    # Hyginus Myth: This is a bit of a lie, as this marks a place
    # where there *might* be a new div -- it's not really the heading of
    # this "par" subdiv.  But it won't validate and I can't think of a
    # better way to mark this up.
    if ($file eq 'phi1263001.xml') {
        $out =~ s#<label>\s*QVI PIISSIMI FVERVNT\.\s*</label>\s*<div type="par" n="4">#
<div type="par" n="4">
<label>
&lt;QVI PIISSIMI FVERVNT.&gt;
</label>
#;
    }
    if ($file =~ m/^phi1512/) {
        # Stupid "explicit"s in Porphyrio on Horace.  No idea how to
        # mark these up
        $out =~
    s#<(?:head|label)>([^<]*EXPLICIT[^<]*)</(?:head|label)>#<div type="explicit"><p>$1</p></div>#g;
        # Another bizzarely placed heading
        $out =~ s#<head>\s*\[DE SATVRA\s*</head>\s*<div type="lemma" n="12a">#<div type="lemma" n="12a"><label>DE SATURA</label>#;
        # Bizzarre error.  Not all of the Sermones have this heading
        # and the one for poem 3 is in the middle of the scholia to
        # poem 2.
        $out =~ s#<head>\s*EGLOGA III\s*([^<]*)</head>\s*(<div[^>]*>\s*<p>)#$2$1#;
        
    }
    if ($file eq 'phi2150001.xml') {
        # Random headings and explicits in Zeno of Verona
        $out =~ s#<head>\s*TRACTATVS\s*</head>##;
        $out =~ s#<label>\s*EXPLICIT LIBER PRIMVS\s*</label>##;
    }


    
    return $out;
}



sub is_work_verse {
    my ($auth_num, $work_num) = @_;
    # Heuristic to tell prose from verse: a work is verse if its lowest
    # level of markup is "verse" rather than "line", if the author has
    # an "Lyr." in their name or if the ratio of hyphens is very low.
#     print "$query->{auth_num}, $work_num\n";
    my $bottom = $level_label{$corpus}{$auth_num}{$work_num}{0};
    return 1 if $bottom =~ /verse/;
    return 1 if $auth_name =~ /Lyr\./;
    
    my $start_block = $work_start_block{$corpus}{$query->{auth_num}}{$work_num};
    my $next = $work_num;
    $next++;
    my $end_block = $work_start_block{$corpus}{$query->{auth_num}}{$next} ||
        $start_block + 1;
    my $offset = $start_block << 13;
    my $length = ($end_block - $start_block + 1) << 13;
    my $work = substr $buf, $offset, $length;

    my $hyphens_counter = () = $work =~ m/\-[\x80-\xff]/g;
    return 1 if $hyphens_counter == 0;
    my $lines_counter   = () = $work =~ m/\s[\x80-\xff]/g;
    my $ratio = $lines_counter / $hyphens_counter;
#     print "$work_name: $lines_counter - $hyphens_counter = $ratio\n";
    return 1 if $ratio > 20;
    return 0;
}

sub strip_formatting{
    my $x = shift;
    $query->beta_formatting_to_ascii(\$x);

    # Just in case: remove illegal chars for use in TEI header
    $x =~ s#\&\d*##g;
    $x =~ s#\$\d*##g;
    $x =~ s#\<\d*##g;
    $x =~ s#\>\d*##g;
    $x =~ s#\`# #g;
    $x =~ s#[\x00-\x08\x0b\x0c\x0e-\x1f]##g;
    return $x;
}

sub numerically { $a <=> $b; }

# Copied from the Roman.pm module on CPAN
sub roman {
    my %roman_digit = qw(1 IV 10 XL 100 CD 1000 MMMMMM);
    my @figure = reverse sort keys %roman_digit;
    $roman_digit{$_} = [split(//, $roman_digit{$_}, 2)] foreach @figure;
    my $arg = shift;
    return $arg unless $arg =~ m/^\d+$/;
    return $arg if $arg < 0 or $arg > 4000;
    my ($x, $roman);
    foreach (@figure) {
        my($digit, $i, $v) = (int($arg / $_), @{$roman_digit{$_}});
        if (1 <= $digit and $digit <= 3) {
            $roman .= $i x $digit;
        } elsif ($digit == 4) {
            $roman .= "$i$v";
        } elsif ($digit == 5) {
            $roman .= $v;
        } elsif (6 <= $digit and $digit <= 8) {
            $roman .= $v . $i x ($digit - 5);
        } elsif ($digit == 9) {
            $roman .= "$i$x";
        }
        $arg -= $digit * $_;
        $x = $i;
    }
    return $roman ? lc $roman : $arg;
}

